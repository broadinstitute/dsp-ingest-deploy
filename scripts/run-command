#!/usr/bin/env python3

import argparse
import json
import os
from pathlib import Path
import shutil
import subprocess
import sys
import tempfile

PROJECT_DIR = Path(__file__).resolve().parents[1]


def build_parser():
    parser = argparse.ArgumentParser(description='Run a deployment command on ingest configs.')
    parser.add_argument('-e', '--env', dest='env',
        help='Top-level environment to operate against.',
        choices=['dev', 'prod'], required=True)
    parser.add_argument('-i', '--ingest-project', dest='ingest_project',
        help='Optional refinement of the environment to point at a specific project (i.e. "v2f").',
        default='core')
    parser.add_argument('-t', '--template', dest='template', required=True,
        help='Collection of configs / templates to operate against.',
        choices=[d.name for d in (PROJECT_DIR / 'templates').iterdir() if d.is_dir()])
    parser.add_argument('--skip-clean', dest='clean', action='store_false',
        help='If set, existing content in the rendered/ output directory will not be deleted before re-rendering.')
    parser.add_argument('command', choices=['deploy', 'teardown'], help='Command to run.')
    return parser


def run_command(args):
    config = (PROJECT_DIR / 'templates' / args.template / f'{args.ingest_project}.{args.env}.json')
    if not config.is_file():
        raise FileNotFoundError(config.as_posix())

    config_string = json.dumps(json.loads(config.read_text()), indent=2)
    print(f"Running '{args.command}' on template '{args.template}' with profile:\n{config_string}")

    render_target = (PROJECT_DIR / 'rendered' / args.template)
    if args.clean and render_target.is_dir():
        shutil.rmtree(render_target.as_posix())

    with tempfile.NamedTemporaryFile() as tmp:
        tmp.write(config_string.encode('utf-8'))
        tmp.flush()

        subprocess.run([
            (PROJECT_DIR / 'dsp-k8s-deploy' / f'application-{args.command}.sh').as_posix(),
            '-p', config.as_posix(),
            '-t', args.template
        ])


def main():
    parser = build_parser()
    args = parser.parse_args()
    run_command(args)


if __name__ == '__main__':
    main()

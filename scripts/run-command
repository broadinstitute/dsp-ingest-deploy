#!/usr/bin/env python3

import argparse
import json
import os
from pathlib import Path
import shutil
import subprocess
import sys
import tempfile

PROJECT_DIR = Path(__file__).resolve().parents[1]

DEFAULT_REGION = 'us-central1'
DEFAULT_ZONE = 'a'

def build_parser():
    parser = argparse.ArgumentParser(description='Run a deployment command on ingest configs.')
    parser.add_argument('-e', '--env', dest='env',
        help='Top-level environment to operate against.',
        choices=['dev', 'prod'], required=True)
    parser.add_argument('-o', '--owner', dest='owner',
        help='User (or team) name to namespace terraform state and k8s deployments under.',
        default='monster')
    parser.add_argument('-i', '--ingest-project', dest='ingest_project',
        help='Optional refinement of the environment to point at a specific project (i.e. "v2f").',
        default=None)
    parser.add_argument('-p', '--profile', dest='profile', required=True,
        help='Collection of configs / templates to operate against.',
        choices=[d.name for d in (PROJECT_DIR / 'profiles').iterdir() if d.is_dir()])
    parser.add_argument('command', choices=['render', 'deploy', 'teardown'], help='Command to run.')
    return parser


def generate_config(args):
    full_env = f'{args.ingest_project}-{args.env}' if args.ingest_project else args.env
    return {
        'name': 'ingest',
        'intent': f'Ingest deployment for {args.owner} in {full_env}',
        'production': args.env == 'prod',
        'stability': 'stable' if args.env == 'prod' else 'volatile',
        'environments': {
            'default': {
                'name': args.env
            }
        },
        'projects': {
            'default': {
                'name': f'broad-dsp-monster-{full_env}',
                'provider_sa_path': f'secret/devops/terraform/{args.env}/monster/terraform-service-account.json'
            },
            'state_bucket': {
                'provider_sa_path': 'secret/dsp/service-accts/dsp-techops/terraform-state-service-account.json'
            }
        },
        'terraform_state': {
            'default': {
                'state_bucket': 'broad-dsp-terraform-state',
                'state_path_prefix': 'monster'
            }
        },
        'dns': {
            'default': {
                'name': f'monster-{args.env}',
                'zone': f'monster-{args.env}.broadinstitute.org'
            }
        },
        'regions': {
            'default': {
                'name': DEFAULT_REGION,
                'zone_name': DEFAULT_ZONE
            }
        },
        'clusters': {
            'default': {
                'name': 'ingest-k8s-cluster'
            }
        },
        'profile_vars': {
            args.profile: {
                'env': {
                    'INGEST_PROJECT': args.ingest_project if args.ingest_project else 'core'
                }
            }
        }
    }


def run_command(args):
    config = generate_config(args)
    config_string = json.dumps(config, indent=2)
    print(f"Running '{args.command}' on profile '{args.profile}' with config:\n{config_string}")

    render_target = (PROJECT_DIR / 'rendered' / args.owner / args.profile)
    if render_target.is_dir():
        shutil.rmtree(render_target.as_posix())

    with tempfile.NamedTemporaryFile() as tmp:
        tmp.write(config_string.encode('utf-8'))
        tmp.flush()

        subprocess.run([
            (PROJECT_DIR / 'dsp-k8s-deploy' / f'application-{args.command}.sh').as_posix(),
            '-o', args.owner,
            '-e', args.env,
            '-j', tmp.name,
            '-p', args.profile
        ])


def main():
    parser = build_parser()
    args = parser.parse_args()
    run_command(args)


if __name__ == '__main__':
    main()
